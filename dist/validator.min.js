/*! validatorjs - v0.8.2 - https://github.com/skaterdav85/validatorjs - 2013-06-24 */(function(){var t={alpha:"The :attribute field must contain only alphabetic characters.",alpha_dash:"The :attribute field may only contain alpha-numeric characters, as well as dashes and underscores.",alpha_num:"The :attribute field must be alphanumeric.",required:"The :attribute field is required.",email:"The :attribute format is invalid.",def:"The :attribute attribute has errors.",different:"The :attribute and :different must be different.","in":"The selected :attribute is invalid.",min:{numeric:"The :attribute must be at least :min.",string:"The :attribute must be at least :min characters."},max:{numeric:"The :attribute must be less than :max.",string:"The :attribute must be less than :max characters."},not_in:"The selected :attribute is invalid.",same:"The :attribute and :same fields must match.",size:{numeric:"The :attribute must be :size.",string:"The :attribute must be :size characters."},numeric:"The :attribute must be a number.",url:"The :attribute format is invalid."},e=function(){};e.prototype={constructor:e,get:function(t){return this[t]?this[t]:[]},first:function(t){return this[t]?this[t][0]:!1}};var r=function(t,r){this.input=t,this.rules=r,this.errors=new e,this.errorCount=0,this.check()};r.prototype={constructor:r,_createMessage:function(t,e){var r,i;if("string"==typeof t&&"object"==typeof e){r=t;for(i in e)e.hasOwnProperty(i)&&(r=r.replace(":"+i,e[i]))}return r},check:function(){var t,e,r,i,n,a,s,u,o,h,c;for(t in this.input)if(this.input.hasOwnProperty(t)&&(e=this.input[t],this.rules.hasOwnProperty(t)))for(r=this.rules[t].split("|"),i=r.length,n=0;i>n;n++)a=r[n],a.indexOf(":")>=0?(a=a.split(":"),s=a[1],a=a[0]):s=null,u=this.validate[a].call(this,e,s),u||(this.errors.hasOwnProperty(t)||(this.errors[t]=[]),c=this._createErrorMessageTemplateData(t,a,s),h=this._selectMessageTemplate(a,e),o=this._createMessage(h,c),this._addErrorMessage(t,o))},_addErrorMessage:function(t,e){this.errors[t].push(e),this.errorCount++},_createErrorMessageTemplateData:function(t,e,r){var i={attribute:t};return i[e]=r,i},_selectMessageTemplate:function(e,r){var i;if(t.hasOwnProperty(e)){if(i=t[e],"object"==typeof i)switch(typeof r){case"number":i=i.numeric;break;case"string":i=i.string}}else i=t.def;return i},passes:function(){return 0===this.errorCount?!0:!1},fails:function(){return this.errorCount>0?!0:!1},first:function(t){return this.errors.hasOwnProperty(t)?this.errors[t][0]:null},validate:{required:function(t){var e=t.replace(/\s/g,"");return(e+"").length>0?!0:!1},size:function(t,e){return e=parseFloat(e),"number"==typeof t?t===e?!0:!1:t.length===e?!0:!1},min:function(t,e){return"number"==typeof t?t>=e?!0:!1:t.length>=e?!0:!1},max:function(t,e){return"number"==typeof t?e>=t?!0:!1:e>=t.length?!0:!1},email:function(t){return/\w+@\w{2,}\.\w{2,}/.test(t)},numeric:function(t){var e=Number(t);return"number"!=typeof e||isNaN(e)||"boolean"==typeof t?!1:!0},url:function(t){return/^https?:\/\/\S+/.test(t)},alpha:function(t){return/^[a-zA-Z]+$/.test(t)},alpha_dash:function(t){return/^[a-zA-Z0-9_\-]+$/.test(t)},alpha_num:function(t){return/^[a-zA-Z0-9]+$/.test(t)},same:function(t,e){var r=this.input[e],i=t;return r===i?!0:!1},different:function(t,e){var r=this.input[e],i=t;return r!==i?!0:!1},"in":function(t,e){var r=e.split(","),i=r.length,n=!1;t+="";for(var a=0;i>a;a++)if(t===r[a]){n=!0;break}return n},not_in:function(t,e){var r=e.split(","),i=r.length,n=!0;t+="";for(var a=0;i>a;a++)if(t===r[a]){n=!1;break}return n}}},r.register=function(e,r,i){this.prototype.validate[e]=r,"string"==typeof i&&(t[e]=i)},"undefined"!=typeof module&&"undefined"!=typeof require?module.exports=r:window.Validator=r})();